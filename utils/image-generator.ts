export interface UserInfo {
  age: string
  weight: string
  height: string
  gender: string
  goal: string
  dietary: string
  activity: string
  additional?: string
}

function cleanTextForImage(text: string): string {
  // Clean markdown but keep emojis for visual appeal
  return text
    .replace(/\*\*(.*?)\*\*/g, "$1") // Remove **bold**
    .replace(/\*(.*?)\*/g, "$1") // Remove *italic*
    .replace(/__(.*?)__/g, "$1") // Remove __bold__
    .replace(/_(.*?)_/g, "$1") // Remove _italic_
    .replace(/`(.*?)`/g, "$1") // Remove `code`
    .replace(/~~(.*?)~~/g, "$1") // Remove ~~strikethrough~~
    .trim()
}

export function generatePlanImage(plan: string, userInfo: UserInfo): void {
  // Create a temporary div to render the plan
  const tempDiv = document.createElement("div")
  tempDiv.style.cssText = `
    position: absolute;
    left: -9999px;
    top: -9999px;
    width: 800px;
    padding: 40px;
    background: linear-gradient(135deg, #f0fdf4 0%, #ffffff 100%);
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    color: #1f2937;
    line-height: 1.6;
  `

  // Create the HTML content
  const cleanPlan = cleanTextForImage(plan)
  const lines = cleanPlan.split("\n")

  let htmlContent = `
    <div style="background: linear-gradient(90deg, #22c55e 0%, #16a34a 100%); color: white; padding: 20px; margin: -40px -40px 30px -40px; border-radius: 0;">
      <h1 style="margin: 0; font-size: 28px; font-weight: bold; text-align: center;">üåü YOUR PERSONALIZED WELLNESS PLAN</h1>
      <p style="margin: 10px 0 0 0; text-align: center; opacity: 0.9;">Generated by Flex Aura AI</p>
    </div>
    
    <div style="background: #f8fafc; padding: 20px; border-radius: 12px; margin-bottom: 30px; border-left: 4px solid #22c55e;">
      <h2 style="margin: 0 0 15px 0; color: #16a34a; font-size: 20px;">üìä YOUR PROFILE</h2>
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 14px;">
        <div>üë§ <strong>Age:</strong> ${userInfo.age} years old</div>
        <div>‚öñÔ∏è <strong>Weight:</strong> ${userInfo.weight} kg</div>
        <div>üìè <strong>Height:</strong> ${userInfo.height} cm</div>
        <div>üöª <strong>Gender:</strong> ${userInfo.gender}</div>
        <div style="grid-column: 1 / -1;">üéØ <strong>Goal:</strong> ${userInfo.goal}</div>
        <div style="grid-column: 1 / -1;">üçΩÔ∏è <strong>Diet:</strong> ${userInfo.dietary}</div>
        <div style="grid-column: 1 / -1;">üèÉ <strong>Activity:</strong> ${userInfo.activity}</div>
        ${userInfo.additional ? `<div style="grid-column: 1 / -1;">üìù <strong>Notes:</strong> ${userInfo.additional}</div>` : ""}
      </div>
    </div>
    
    <div style="font-size: 14px; line-height: 1.7;">
  `

  // Process the plan content
  for (const line of lines) {
    if (line.trim() === "") {
      htmlContent += '<div style="height: 10px;"></div>'
      continue
    }

    if (line.startsWith("# ")) {
      htmlContent += `<h2 style="color: #16a34a; font-size: 22px; margin: 25px 0 15px 0; font-weight: bold;">${line.substring(2)}</h2>`
    } else if (line.startsWith("## ")) {
      htmlContent += `<h3 style="color: #059669; font-size: 18px; margin: 20px 0 10px 0; font-weight: bold;">${line.substring(3)}</h3>`
    } else if (line.startsWith("### ")) {
      htmlContent += `<h4 style="color: #047857; font-size: 16px; margin: 15px 0 8px 0; font-weight: bold;">${line.substring(4)}</h4>`
    } else if (line.startsWith("- ") || line.startsWith("* ")) {
      htmlContent += `<div style="margin: 5px 0; padding-left: 20px; position: relative;">
        <span style="position: absolute; left: 0; color: #22c55e;">‚Ä¢</span>
        ${line.substring(2)}
      </div>`
    } else {
      htmlContent += `<p style="margin: 8px 0;">${line}</p>`
    }
  }

  htmlContent += `
    </div>
    <div style="margin-top: 40px; padding-top: 20px; border-top: 2px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 12px;">
      <p>Generated on ${new Date().toLocaleDateString()} | Flex Aura AI Health Coach</p>
    </div>
  `

  tempDiv.innerHTML = htmlContent
  document.body.appendChild(tempDiv)

  // Use html2canvas to convert to image
  import("html2canvas")
    .then((html2canvas) => {
      html2canvas
        .default(tempDiv, {
          backgroundColor: "#ffffff",
          scale: 2,
          useCORS: true,
          allowTaint: true,
          width: 800,
          height: tempDiv.scrollHeight + 80,
        })
        .then((canvas) => {
          // Create download link
          const link = document.createElement("a")
          link.download = `flex-aura-wellness-plan-${userInfo.goal.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase()}-${new Date().toISOString().split("T")[0]}.png`
          link.href = canvas.toDataURL("image/png")
          link.click()

          // Clean up
          document.body.removeChild(tempDiv)
        })
        .catch((error) => {
          console.error("Error generating image:", error)
          document.body.removeChild(tempDiv)

          // Fallback: create a simple text file
          const textContent = `FLEX AURA WELLNESS PLAN\n\n${plan}\n\nGenerated on ${new Date().toLocaleDateString()}`
          const blob = new Blob([textContent], { type: "text/plain" })
          const url = URL.createObjectURL(blob)
          const link = document.createElement("a")
          link.href = url
          link.download = `flex-aura-wellness-plan-${userInfo.goal.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase()}.txt`
          link.click()
          URL.revokeObjectURL(url)
        })
    })
    .catch((error) => {
      console.error("Error loading html2canvas:", error)
      document.body.removeChild(tempDiv)

      // Fallback: create a simple text file
      const textContent = `FLEX AURA WELLNESS PLAN\n\n${plan}\n\nGenerated on ${new Date().toLocaleDateString()}`
      const blob = new Blob([textContent], { type: "text/plain" })
      const url = URL.createObjectURL(blob)
      const link = document.createElement("a")
      link.href = url
      link.download = `flex-aura-wellness-plan-${userInfo.goal.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase()}.txt`
      link.click()
      URL.revokeObjectURL(url)
    })
}
