import jsPDF from "jspdf"

export interface UserInfo {
  age: string
  weight: string
  height: string
  gender: string
  goal: string
  dietary: string
  activity: string
  additional?: string
}

function cleanTextForPDF(text: string): string {
  // Remove all emojis and markdown formatting for PDF
  return text
    .replace(
      /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu,
      "",
    ) // Remove emojis
    .replace(/\*\*(.*?)\*\*/g, "$1") // Remove **bold**
    .replace(/\*(.*?)\*/g, "$1") // Remove *italic*
    .replace(/__(.*?)__/g, "$1") // Remove __bold__
    .replace(/_(.*?)_/g, "$1") // Remove _italic_
    .replace(/`(.*?)`/g, "$1") // Remove `code`
    .replace(/~~(.*?)~~/g, "$1") // Remove ~~strikethrough~~
    .replace(/#+\s/g, "") // Remove markdown headers
    .replace(/^\s*[-*+]\s/gm, "• ") // Convert markdown bullets to simple bullets
    .trim()
}

export function generatePlanPDF(plan: string, userInfo: UserInfo): void {
  const pdf = new jsPDF()
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()
  const margin = 20
  const maxWidth = pageWidth - 2 * margin
  let yPosition = margin

  // Helper function to add text with word wrapping
  const addText = (text: string, fontSize = 10, isBold = false, isHeader = false, headerLevel = 1) => {
    // Clean the text from emojis and markdown formatting
    const cleanText = cleanTextForPDF(text)

    if (!cleanText.trim()) return // Skip empty lines

    pdf.setFontSize(fontSize)

    if (isHeader) {
      pdf.setFont("helvetica", "bold")
      // Set different colors for different header levels
      if (headerLevel === 1) {
        pdf.setTextColor(34, 139, 34) // Forest green for main headers
      } else if (headerLevel === 2) {
        pdf.setTextColor(46, 125, 50) // Medium green for sub headers
      } else {
        pdf.setTextColor(67, 160, 71) // Light green for sub-sub headers
      }
    } else if (isBold) {
      pdf.setFont("helvetica", "bold")
      pdf.setTextColor(0, 0, 0)
    } else {
      pdf.setFont("helvetica", "normal")
      pdf.setTextColor(0, 0, 0)
    }

    const lines = pdf.splitTextToSize(cleanText, maxWidth)

    // Check if we need a new page
    if (yPosition + lines.length * (fontSize * 0.5) > pageHeight - margin) {
      pdf.addPage()
      yPosition = margin
    }

    pdf.text(lines, margin, yPosition)
    yPosition += lines.length * (fontSize * 0.5) + (isHeader ? 8 : 3)
  }

  // Add header with gradient-like effect
  pdf.setFillColor(34, 197, 94) // Green color
  pdf.rect(0, 0, pageWidth, 35, "F")

  pdf.setTextColor(255, 255, 255)
  pdf.setFontSize(22)
  pdf.setFont("helvetica", "bold")
  pdf.text("YOUR PERSONALIZED WELLNESS PLAN", margin, 22)

  yPosition = 50
  pdf.setTextColor(0, 0, 0)

  // Add user info section with better formatting
  pdf.setFillColor(248, 250, 252) // Light gray background
  pdf.rect(margin - 5, yPosition - 5, maxWidth + 10, 60, "F")

  addText("YOUR PROFILE", 16, true, true, 1)
  addText(`Age: ${userInfo.age} years old`, 11)
  addText(`Weight: ${userInfo.weight} kg`, 11)
  addText(`Height: ${userInfo.height} cm`, 11)
  addText(`Gender: ${userInfo.gender}`, 11)
  addText(`Primary Goal: ${userInfo.goal}`, 11)
  addText(`Dietary Preference: ${userInfo.dietary}`, 11)
  addText(`Activity Level: ${userInfo.activity}`, 11)
  if (userInfo.additional) {
    addText(`Additional Notes: ${userInfo.additional}`, 11)
  }

  yPosition += 15

  // Process the plan content with proper text cleaning
  const lines = plan.split("\n")

  for (const line of lines) {
    if (line.trim() === "") {
      yPosition += 3
      continue
    }

    // Handle headers with proper styling
    if (line.startsWith("# ")) {
      yPosition += 10
      addText(line.substring(2), 18, false, true, 1)
    } else if (line.startsWith("## ")) {
      yPosition += 8
      addText(line.substring(3), 15, false, true, 2)
    } else if (line.startsWith("### ")) {
      yPosition += 6
      addText(line.substring(4), 13, false, true, 3)
    } else if (line.startsWith("- ") || line.startsWith("* ")) {
      // Handle bullet points with proper indentation
      const bulletText = "• " + line.substring(2)
      addText(bulletText, 10, false)
    } else {
      // Regular text - clean any remaining markdown and emojis
      addText(line, 10, false)
    }
  }

  // Add footer with better styling
  const totalPages = pdf.getNumberOfPages()
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i)

    // Add footer background
    pdf.setFillColor(248, 250, 252)
    pdf.rect(0, pageHeight - 20, pageWidth, 20, "F")

    pdf.setFontSize(8)
    pdf.setTextColor(100, 100, 100)
    pdf.text(`Generated by Flex Aura AI Health Coach`, margin, pageHeight - 10)
    pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 30, pageHeight - 10)
    pdf.text(`Created: ${new Date().toLocaleDateString()}`, pageWidth - margin - 80, pageHeight - 5)
  }

  // Save the PDF with a more descriptive name
  const goalType = userInfo.goal.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase()
  const fileName = `flex-aura-wellness-plan-${goalType}-${new Date().toISOString().split("T")[0]}.pdf`
  pdf.save(fileName)
}
